package scom.antony.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import scom.antony.data.dao.AntonyObjectDaoW;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ANTONY_OBJECT_DAO_W.
*/
public class AntonyObjectDaoWDao extends AbstractDao<AntonyObjectDaoW, Void> {

    public static final String TABLENAME = "ANTONY_OBJECT_DAO_W";

    /**
     * Properties of entity AntonyObjectDaoW.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Type = new Property(0, int.class, "type", false, "TYPE");
        public final static Property Data = new Property(1, byte[].class, "data", false, "DATA");
        public final static Property ObjectId = new Property(2, long.class, "objectId", false, "OBJECT_ID");
        public final static Property AddinId = new Property(3, long.class, "addinId", false, "ADDIN_ID");
    };


    public AntonyObjectDaoWDao(DaoConfig config) {
        super(config);
    }
    
    public AntonyObjectDaoWDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ANTONY_OBJECT_DAO_W' (" + //
                "'TYPE' INTEGER NOT NULL ," + // 0: type
                "'DATA' BLOB," + // 1: data
                "'OBJECT_ID' INTEGER NOT NULL ," + // 2: objectId
                "'ADDIN_ID' INTEGER NOT NULL );"); // 3: addinId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ANTONY_OBJECT_DAO_W_OBJECT_ID_ADDIN_ID ON ANTONY_OBJECT_DAO_W" +
                " (OBJECT_ID,ADDIN_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ANTONY_OBJECT_DAO_W'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AntonyObjectDaoW entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getType());
 
        byte[] data = entity.getData();
        if (data != null) {
            stmt.bindBlob(2, data);
        }
        stmt.bindLong(3, entity.getObjectId());
        stmt.bindLong(4, entity.getAddinId());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public AntonyObjectDaoW readEntity(Cursor cursor, int offset) {
        AntonyObjectDaoW entity = new AntonyObjectDaoW( //
            cursor.getInt(offset + 0), // type
            cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1), // data
            cursor.getLong(offset + 2), // objectId
            cursor.getLong(offset + 3) // addinId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AntonyObjectDaoW entity, int offset) {
        entity.setType(cursor.getInt(offset + 0));
        entity.setData(cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1));
        entity.setObjectId(cursor.getLong(offset + 2));
        entity.setAddinId(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(AntonyObjectDaoW entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(AntonyObjectDaoW entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
