package scom.antony.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import scom.antony.data.dao.AntonyFlexListDaoW;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ANTONY_FLEX_LIST_DAO_W.
*/
public class AntonyFlexListDaoWDao extends AbstractDao<AntonyFlexListDaoW, Void> {

    public static final String TABLENAME = "ANTONY_FLEX_LIST_DAO_W";

    /**
     * Properties of entity AntonyFlexListDaoW.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Folderid = new Property(0, String.class, "folderid", false, "FOLDERID");
        public final static Property Fid = new Property(1, String.class, "fid", false, "FID");
        public final static Property Data = new Property(2, byte[].class, "data", false, "DATA");
    };


    public AntonyFlexListDaoWDao(DaoConfig config) {
        super(config);
    }
    
    public AntonyFlexListDaoWDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ANTONY_FLEX_LIST_DAO_W' (" + //
                "'FOLDERID' TEXT NOT NULL UNIQUE ," + // 0: folderid
                "'FID' TEXT NOT NULL ," + // 1: fid
                "'DATA' BLOB);"); // 2: data
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ANTONY_FLEX_LIST_DAO_W_FOLDERID ON ANTONY_FLEX_LIST_DAO_W" +
                " (FOLDERID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ANTONY_FLEX_LIST_DAO_W'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AntonyFlexListDaoW entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFolderid());
        stmt.bindString(2, entity.getFid());
 
        byte[] data = entity.getData();
        if (data != null) {
            stmt.bindBlob(3, data);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public AntonyFlexListDaoW readEntity(Cursor cursor, int offset) {
        AntonyFlexListDaoW entity = new AntonyFlexListDaoW( //
            cursor.getString(offset + 0), // folderid
            cursor.getString(offset + 1), // fid
            cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2) // data
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AntonyFlexListDaoW entity, int offset) {
        entity.setFolderid(cursor.getString(offset + 0));
        entity.setFid(cursor.getString(offset + 1));
        entity.setData(cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(AntonyFlexListDaoW entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(AntonyFlexListDaoW entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
